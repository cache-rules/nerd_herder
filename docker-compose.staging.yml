version: '3'
services:
  postgres:
    image: postgres:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    env_file:
      - postgres.staging.env
    volumes:
      - './.docker-data/postgresql/data:/var/lib/postgresql/data/'
  redis:
    image: 'redis:alpine'
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  nerd_herder:
    build:
      context: .
      dockerfile: docker/nerd_herder/Dockerfile
    image: registry.gitlab.com/cache-rules/nerd_herder_ops/nerd_herder:0.8-beta
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    env_file:
      - nerd_herder.staging.env
      - slack.staging.env
    volumes:
      - './nerd_herder/:/usr/src/nerd_herder/nerd_herder/'
      - './config/:/usr/src/nerd_herder/config/'
    depends_on:
      - redis
      - postgres
    links:
      - redis
      - postgres
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    image: registry.gitlab.com/cache-rules/nerd_herder_ops/frontend:0.6-beta
    deploy:
      replicas: 0
  reverse_proxy:
    build:
      context: .
      dockerfile: docker/reverse_proxy/Dockerfile
      args:
        FRONTEND_IMAGE: registry.gitlab.com/cache-rules/nerd_herder_ops/frontend:0.6-beta
        BACKEND_IMAGE: registry.gitlab.com/cache-rules/nerd_herder_ops/nerd_herder:0.8-beta
    image: registry.gitlab.com/cache-rules/nerd_herder_ops/reverse_proxy:0.11-beta
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    env_file:
      - caddy.staging.env
    depends_on:
      - nerd_herder
    links:
      - nerd_herder
    volumes:
      - './.docker-data/caddy:/root/.caddy'
      - './Caddyfile.staging:/etc/Caddyfile'
    ports:
      - '8080:8080'
